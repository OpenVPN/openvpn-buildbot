# -*- python -*-
# ex: set syntax=python:

####### UTILITY METHODS
#
# Methods in this section taken from here:
#
# <http://code.activestate.com/recipes/190465>
#
# It is licensed under CC-BY-SA 3.0:
#
# <http://code.activestate.com/help/terms>
#
# Due to this rest of the code is licensed under CC-BY-SA 3.0, too.

def xcombinations(items, n):
    if n==0: yield []
    else:
        for i in xrange(len(items)):
            for cc in xcombinations(items[:i]+items[i+1:],n-1):
                yield [items[i]]+cc

def xuniqueCombinations(items, n):
    if n==0: yield []
    else:
        for i in xrange(len(items)):
            for cc in xuniqueCombinations(items[i+1:],n-1):
                yield [items[i]]+cc

def xselections(items, n):
    if n==0: yield []
    else:
        for i in xrange(len(items)):
            for ss in xselections(items, n-1):
                yield [items[i]]+ss

def xpermutations(items):
    return xcombinations(items, len(items))


####### GENERIC BUILDBOT SETTINGS

# Old GitMaildirSource
#from buildbot.changes.mail import GitMaildirSource
#c['change_source'] = GitMaildirSource("/home/buildmaster/maildir")

from buildbot.changes.gitpoller import GitPoller

# This is the dictionary that the buildmaster pays attention to. The whole 
# purpose of this Python file is to populate this dictionary. We also use a 
# shorter alias to save typing.
c = BuildmasterConfig = {}

c['projectName'] = "OpenVPN"
c['projectURL'] = "https://community.openvpn.net/openvpn/wiki"
c['buildbotURL'] = "http://buildbot.domain.com:8010/"
c['buildHorizon'] = 100
c['eventHorizon'] = 50
c['logHorizon'] = 40
c['buildCacheSize'] = 15
c['slavePortnum'] = 9989
c['change_source'] = GitPoller(repourl='git://git.code.sf.net/p/openvpn/openvpn-testing', branch='master', workdir='/var/lib/buildbot/masters/openvpn/gitpoller_workdir', project='OpenVPN', pollinterval=300)

####### RESOURCES

# Buildslave servers
buildslaves = [ "ubuntu-1204-i386", "debian-7-i386", "cron2-freebsd-82-amd64", "cron2-openbsd-49-i386", "cron2-netbsd-51-amd64", "cron2-freebsd-74-amd64", "cron2-freebsd-90-amd64", "centos-6-amd64", "cron2-opensolaris-10-i386", "ubuntu-1404-amd64" ]

####### PERMUTATIONS TO TEST

# Git repositories to track
repo1 = [ "git://git.code.sf.net/p/openvpn/openvpn-testing", "stable" ]
repos = [repo1]

# Branches to track
branches = ["master"]

# Build flag combinations to use
buildflags = [ "--disable-crypto", "--disable-lzo", "--disable-management" ]

# Special combinations we want to check
extrabuildflagcombos = [ "--with-crypto-library=mbedtls --enable-crypto", "--disable-lzo", "--disable-lz4", "--disable-lzo --disable-lz4 --enable-comp-stub", "--enable-small", "--disable-server --enable-small"]

# Generate a nested list with unique build flag combinations
buildflagcombos = []
for n in range(len(buildflags)+1):
    for p in xuniqueCombinations(buildflags,n):
        buildflagcombos.append(p)

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

c['slaves'] = []
for buildslave in buildslaves:
    # We use a shared password to cut down complexity. This is also needed on 
    # all buildslaves. Please adapt this to your system, or better yet, modify 
    # this script so that this information is read from a configuration file.
    s = BuildSlave("slave-"+buildslave, "my_buildslave_password", max_builds=1, notify_on_missing="john@domain.com", missing_timeout=24*60*60)
    c['slaves'].append(s)
    del s

####### BUILDERS AND SCHEDULERS

from buildbot.process import factory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.steps.transfer import FileDownload
from buildbot.steps.master import MasterShellCommand
from buildbot.scheduler import Periodic
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot import scheduler

# We need to copy factories to avoid referencing to the same one every time
from copy import deepcopy

c['builders']=[]
c['schedulers'] = []
# Needed for scheduler objects; a list of strings with builder names

# All builders (used for build testing)
buildernames_full=[]

# Builders using standard options (used for connection testing)
buildernames_standard=[]

# Add build testing builders to c['builders']
for s in buildslaves:

    # Various OS-specific workarounds
    if s == "cron2-openbsd-49-i386":
        customenv={}
        slaveflaglist=["--disable-plugin-auth-pam"]
    else:
        customenv={}
        slaveflaglist=[""]


    for r in repos:
        for b in branches:
            for f in buildflagcombos:

                tempfactory = factory.BuildFactory()
                # We don't want to checkout code from Git for every single build
                tempfactory.addStep(Git(repourl=r[0], branch=b, mode="update"))
                tempfactory.addStep(ShellCommand(command=["autoreconf", "-v", "-i"], description=["reconfiguring"], descriptionDone=["autoreconf"]))

                configurecommand=["./configure"]

                # Setup configure options
                extraflags=""

				# f will contain a list of strings and/or list 
                for flag in f:
                    # Check if the flag is a list, instead of a string (i.e. a grouping of flags)
                    if type(flag) is list:
                        for subflag in flag:
                            configurecommand.append(subflag)
                            extraflags=extraflags+subflag
                    else:
                        configurecommand.append(flag)
                        extraflags=extraflags+flag


                # Add OS/buildslave-specific configure flags
                slaveflags=""

                for flag in slaveflaglist:
                    configurecommand.append(flag)
                    slaveflags=slaveflags+flag

                tempfactory.addStep(Configure(command=configurecommand, env=customenv))

                tempbuildername = 'builder-'+s+'-'+r[1]+'-'+b+extraflags+slaveflags

                # Add connectivity tests to builders which have no build flags
                if extraflags == "":
                    # Tests will fail on NetBSD without a patch to t_lpback.sh
                    if tempbuildername == 'builder-cron2-netbsd-51-amd64-stable-master':
                        tempfactory.addStep(ShellCommand(command=["cp", "-f", "/home/buildbot/netbsd-t_lpback.sh.patch", "."], description=["copy t_lpback.sh.patch"], descriptionDone=["copied t_lpback.sh.patch"]))
                        tempfactory.addStep(ShellCommand(command=["patch", "-p1", "tests/t_lpback.sh", "netbsd-t_lpback.sh.patch"], description=["patch t_lpback.sh"], descriptionDone=["patched t_lpback.sh"]))

                    tempfactory.addStep(ShellCommand(command=["cp", "-f", "/home/buildbot/t_client.rc", "."], description=["t_client.rc"], descriptionDone=["t_client.rc"]))
                    tempfactory.addStep(Compile(command=["make", "clean"], env=customenv))
                    tempfactory.addStep(Compile(command=["make"], env=customenv))
                    tempfactory.addStep(Compile(command=["make", "check"], env=customenv))
                else:
                    tempfactory.addStep(Compile(command=["make", "clean"], env=customenv))
                    tempfactory.addStep(Compile(command=["make"], env=customenv))

                tempbuilder = { 'name': tempbuildername,
                    'slavename': 'slave-'+s,
                    'builddir': 'build-'+s+'-'+r[1]+'-'+b+extraflags+slaveflags,
                    'factory': deepcopy(tempfactory),
                }

                # Add this builder to list of builders
                c['builders'].append(tempbuilder)

                # Clean up the temporary variables
                del tempfactory
                del tempbuilder

            # Generate builders that build using hand-picked combinations 
            for f in extrabuildflagcombos:
                # Add slave-specific build flags
                fold=f
                f=f+" "+slaveflags

                tempfactory = factory.BuildFactory()
                tempfactory.addStep(Git(repourl=r[0], branch=b, mode="update"))
                tempfactory.addStep(ShellCommand(command=["autoreconf", "-v", "-i"], description=["reconfiguring"], descriptionDone=["aureconf"]))
                tempfactory.addStep(Configure(command="./configure "+f))
                tempfactory.addStep(Compile(command=["make"]))

                # Add connectivity tests to basic mbedTLS builds
                if fold == "--with-crypto-library=mbedtls --enable-crypto":
                    tempfactory.addStep(ShellCommand(command=["cp", "-f", "/home/buildbot/t_client.rc", "."], description=["t_client.rc"], descriptionDone=["t_client.rc"]))
                    tempfactory.addStep(Compile(command=["make", "clean"], env=customenv))
                    tempfactory.addStep(Compile(command=["make"], env=customenv))
                    tempfactory.addStep(Compile(command=["make", "check"], env=customenv))
                else:
                    tempfactory.addStep(Compile(command=["make", "clean"], env=customenv))
                    tempfactory.addStep(Compile(command=["make"], env=customenv))

                tempbuildername = 'builder-'+s+'-'+r[1]+'-'+b+f
                tempbuilder = { 'name': tempbuildername,
                    'slavename': 'slave-'+s,
                    'builddir': 'build-'+s+'-'+r[1]+'-'+b+f,
                    'factory': deepcopy(tempfactory),
                }

                # Add this builder to list of builders
                c['builders'].append(tempbuilder)

                # Clean up the temporary variables
                del tempfactory
                del tempbuilder

# Generate a list of buildernames for schedulers
for builder in c['builders']:
    if builder['name'] not in buildernames_full:
        buildernames_full.append(builder['name'])

# May be useful for testing sometimes
#nightly = Periodic(name="nightly", builderNames=buildernames_full, periodicBuildTimer=24*60*60)

# Trigger full set of builds after 10 minutes
scheduler_full = scheduler.Scheduler(name="scheduler_full", branch="master", treeStableTimer=10*60, builderNames=buildernames_full)

# Force build scheduler
scheduler_forced = ForceScheduler(name="scheduler_forced", builderNames=buildernames_full)

c['schedulers'] = [scheduler_full, scheduler_forced]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

# We want buildbot to send mail if something important happens (e.g. build 
# fails). For more information, see this:
#
# http://djmitche.github.com/buildbot/docs/0.7.12/#MailNotifier

from buildbot.status.mail import MailNotifier

# A very simple mailer. The email address should be modified.
mn = MailNotifier(fromaddr="buildbot@domain.com", sendToInterestedUsers=False, extraRecipients=['mailinglist@domain.com'], mode="failing", addLogs=True)

c['status'].append(mn)
